import java.util.NoSuchElementException;

public interface OrderedSet extends Cloneable {

	/**
	 * опустошает количество.
	 */
	public void clear();

	/**
	 * Вычисляет количество элементов в наборе и возвращает их.
	 *
	 * @return Количество элементов
	 */
	public int size();

	/**
	 * Проверяет, включен ли элемент в набор.
	 *
	 * @param value
	 *            Элемент, наличие которого в наборе необходимо проверить
	 * @return true если включен, иначе false
	 */
	public boolean contains(int value);

	/**
	 * Создает одномерное поле из набора с элементами, отсортированными в порядке возрастания.
	 *
	 * @return Поле с элементами, отсортированными по возрастанию.
	 */
	public int[] toArray();

	/**
	 * Создает одномерное поле с элементами, отсортированными в порядке убывания от набора.
	 *
	 *
	 * @return Поле с элементами, отсортированными по убыванию.
	 */
	public int[] toReversedArray();

	/**
	 * Вставляет элемент <b> отсортированный </b> в набор. Если значение уже существует,
	 * генерируется самостоятельно созданное исключение ElementExistsException!
	 *
	 * @param value
	 *            Значение для вставки
	 *
	 */
	public void add(int value);

	/**
	 * Добавляет в набор все элементы поля <b> отсортировано </b>. Если значение уже существует,
	 * генерируется самостоятельно созданное исключение ElementExistsException!
	 *
	 * @param values
	 *            Поле со значениями для вставки
	 */
	public void add(int[] values);

	/**
	 * Удаляет элемент из списка.
	 *
	 * @param value
	 *            Элемент, который нужно удалить
	 * @throws NoSuchElementException
	 *             если элемент не появился в списке
	 */
	public void remove(int value) throws NoSuchElementException;

	/**
	 * Делает копию набора.
	 *
	 * @return копия набора.
	 */
	public OrderedSet clone();

	/**
	 * Ищет в этом наборе элементы в интервале [from; to]
	 * и генерирует новый набор с найденными элементами.
	 *
	 * @param from
	 *            Нижняя граница нового набора
	 * @param to
	 *            Верхняя граница нового набора
	 * @return Новый набор со всеми найденными элементами из интервала [from, to]
	 */
	public OrderedSet getSetInBetween(int from, int to);

	/**
	 * Вычисляет пересечение этого множества с переданным.
	 *
	 * @param set
	 *            Сумма, с которой нужно рассчитать пересечение.
	 * @return Набор для расчета пересечения; пересечение как новый набор
	 */
	public OrderedSet intersect(OrderedSet set);

	/**
	 * Вычисляет объединение этого набора с переданным.
	 *
	 * @param set
	 *            Сумма, с которой вычисляется объединение.
	 * @return объединение как новый набор
	 */
	public OrderedSet unite(OrderedSet set);

	/**
	 * Рассчитывает количественную разницу этого количества с переданным.
	 *
	 * @param set
	 *            Сумма вычитания
	 * @return Разница в количестве как новое количество
	 */
	public OrderedSet subtract(OrderedSet set);

	/**
	 * Возвращает значения, разделенные пробелами и заключенные
	 * в фигурные скобки, в виде строки. </br>
	 *
	 * Пример пустого набора: {} </br>
	 * Пример для набора со значениями 3, 1 и 2: {[1] -> [2] -> [3]}
	 *
	 * @return набор в виде текста
	 */
	public String toString();
}
